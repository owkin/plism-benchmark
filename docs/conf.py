#!/usr/bin/env python
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

# Workaround https://github.com/mgaitan/sphinxcontrib-mermaid/issues/72
import errno

# If extensions (or modules to document with autodoc) are in another
# directory, add these directories to sys.path here. If the directory is
# relative to the documentation root, use os.path.abspath to make it
# absolute, like shown here.
#
import os
import sys
import datetime
import pkg_resources

import sphinx.util.osutil

sphinx.util.osutil.ENOENT = errno.ENOENT

sys.path.insert(0, os.path.abspath('..'))

# -- General configuration ---------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom ones.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.viewcode',
    'sphinx.ext.doctest',
    'sphinx.ext.napoleon',
    'sphinx.ext.intersphinx',
    'sphinxcontrib.mermaid',
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = '.rst'

# The master toctree document.
master_doc = 'index'

# package distribution
package_distribution = pkg_resources.get_distribution('plismbench')

# General information about the project.
project = 'PLISM robustness benchmark'
copyright = f'{datetime.date.today().year}, XXXX.'
author = 'XXXX'

# The version info for the project you're documenting, acts as replacement
# for |version| and |release|, also used in various other places throughout
# the built documents.
#
# The short X.Y version.
version = package_distribution.version
# The full version, including alpha/beta/rc tags.
release = package_distribution.version

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = 'en'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This patterns also effect to html_static_path and html_extra_path
exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store']

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = False

# Autodoc documentation
autodoc_default_options = {'member-order': 'bysource', 'undoc-members': True}

# -- Options for HTML output -------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = 'pydata_sphinx_theme'

# Theme options are theme-specific and customize the look and feel of a
# theme further.  For a list of options available for each theme, see the
# documentation.
#
# html_theme_options = {}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".


# -- Options for HTMLHelp output ---------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = 'plismbenchdoc'

# -- Options for LaTeX output ------------------------------------------

latex_elements: dict = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',
    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',
    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',
    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title, author, documentclass
# [howto, manual, or own class]).
latex_documents = [
    (master_doc, 'plismbench.tex', project, 'XXXX', 'manual'),
]

# -- Options for manual page output ------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [(master_doc, 'plismbench', project, [author], 1)]

# -- Options for Texinfo output ----------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (
        master_doc,
        'plismbench',
        project,
        author,
        'plismbench',
        'Repository hosting PLIM robustness benchmark',
        'Data Science',
    ),
]

# -- Options for pydata-sphinx-theme -----------------------------------

html_static_path = ["_static"]
html_theme_options = {
    "github_url": "https://github.com/XXXX/plism-benchmark", # this will break the documentation
    "show_prev_next": False,
   "logo": {
      "image_light": "logo-light.png",
      "image_dark": "logo-dark.png",
   }
}

# -- Options for sphinx.ext.intersphinx --------------------------------

intersphinx_mapping = {
    'python': ('https://docs.python.org/3', None),
    'pandas': ('https://pandas.pydata.org/pandas-docs/dev', None),
    'numpy': ('https://numpy.org/doc/stable/', None),
    'scipy': ('https://docs.scipy.org/doc/scipy/', None),
    'torch': ('https://pytorch.org/docs/master/', None),
    'matplotlib': ('https://matplotlib.org/stable/', None),
    'torchvision': ('https://pytorch.org/vision/stable/', None),
    'loguru': ('https://loguru.readthedocs.io/en/stable/', None),
    'openslide': ('https://openslide.org/api/python/', None),
    'ml_collections': ('https://ml-collections.readthedocs.io/en/stable/', None),
}
pdf_documents = [
    ('index'),
]

# -- Options for checking cross-references  ----------------------------

nitpicky = True

# -- Options for redirecting references  -------------------------------

autodoc_docstring_signature = True
autodoc_type_aliases = {
    "np.ndarray": "numpy.ndarray",
    "pd.DataFrame": "pandas.DataFrame",
    "ConfigDict": "ml_collections.config_dict.ConfigDict",
    "Callable": "collections.abc.Callable",
    "Any": "typing.Any",
}

docstring_alias = {
    "np.ndarray": "numpy.ndarray",
    "pd.DataFrame": "pandas.DataFrame",
    "Path": "pathlib.Path",
    "ConfigDict": "ml_collections.config_dict.ConfigDict",
    "Callable": "collections.abc.Callable",
    "Any": "typing.Any",
}


def autodoc_process_docstring(app, what, name, obj, options, lines):
    for i in range(len(lines)):
        for old , new in docstring_alias.items():
            lines[i] = lines[i].replace(old, new)


def setup(app):
    app.connect("autodoc-process-docstring", autodoc_process_docstring)
